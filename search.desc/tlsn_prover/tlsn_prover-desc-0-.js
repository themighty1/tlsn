searchState.loadedDescShard("tlsn_prover", 0, "The prover library.\nHTTP Prover.\nTLS prover.\nAn HTTP prover.\nHTTP prover error.\nA notarized HTTP session.\nAn error occurred while parsing the HTTP data.\nAn error originated from the TLS prover.\nGenerates commitments to the HTTP session using the …\nGenerates commitments to the HTTP session using the …\nFinalizes the HTTP session.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new HTTP prover.\nReturns the notarized TLS session.\nReturns a proof for the TLS session.\nStarts notarization of the HTTP session.\nHTTP prover state.\nReturns the HTTP transcript.\nConnection closed state.\nNotarizing state.\nThe state of an HTTP prover\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA prover instance.\nConfiguration for the prover\nBuilder for <code>ProverConfig</code>.\nError type for ProverConfigBuilder\nA controller for the prover.\nAn error that can occur during proving.\nProver future which must be polled for the TLS connection …\nUninitialized field\nCustom validation error\nBuilds a new <code>ProverConfig</code>.\nCreate a new builder for <code>ProverConfig</code>.\nReturns the transcript commitment builder.\nConnects to the server using the provided socket.\nReturns a controller for the prover for advanced …\nDefers decryption of data from the server until the server …\nFinalize the proving\nFinalizes the notarization returning a <code>NotarizedSession</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the instance id.\nId of the notarization session.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new prover.\nReturns the protocol configuration.\nProtocol configuration to be checked with the verifier.\nProve transcript values\nReturns the transcript of the received data.\nReturns the transcript of the received responses\nReturns the transcript of the received responses\nReveal certain parts of the transcripts to the verifier\nTLS root certificate store.\nReturns the transcript of the sent requests\nReturns the transcript of the sent data.\nReturns the transcript of the sent requests\nReturns the server DNS name.\nThe server DNS name.\nSets up the prover.\nStarts notarization of the TLS session.\nStarts proving the TLS session.\nTLS prover states.\nCreates an HTTP prover.\nState after the TLS connection has been closed.\nEntry state\nNotarizing state.\nProving state.\nState after MPC setup has completed.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.")