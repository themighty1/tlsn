searchState.loadedDescShard("tlsn_core", 0, "TLSNotary core protocol library.\nA DNS name.\nA Notary public key.\nA NIST P-256 public key.\nA secp256r1 signature.\nA Server’s name.\nA Notary signature.\nReturns a reference to the server name as a string slice.\nTypes related to transcript commitments.\nFixtures for testing\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMerkle tree types.\nProtocol message types.\nDifferent types of proofs used in the TLSNotary protocol.\nTLS session types.\nReturns the bytes of this signature.\nTranscript data types.\nVerifies the signature.\nA BLAKE3 commitment to encodings of the transcript.\nA BLAKE3 commitment to encodings of the transcript.\nAn opening to a BLAKE3 commitment\nA commitment to some bytes in a transcript\nA commitment id.\nInfo of a transcript commitment\nThe kind of a <code>Commitment</code>.\nAn opening to a commitment to the transcript.\nDuplicate commitment\nEmpty range\nFailed to retrieve encodings for the provided transcript …\nNo commitments were added\nRange out of bounds\nA builder for <code>TranscriptCommitments</code>.\nAn error for <code>TranscriptCommitmentBuilder</code>\nA collection of transcript commitments.\nBLAKE3 commitments.\nBuilds the <code>TranscriptCommitments</code>\nCommits to the provided ranges of the transcript.\nCommits to the provided ranges of the <code>received</code> transcript.\nCommits to the provided ranges of the <code>sent</code> transcript.\nReturns the transcript data corresponding to this opening\nReturns the direction of this commitment\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns a commitment if it exists.\nGets the commitment id for the provided commitment info.\nReturns the commitment id for a commitment with the given …\nReturns commitment info, if it exists.\nReturns the hash of this commitment\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the transcript data corresponding to this opening\nReturns the kind of this commitment\nReturns the kind of this commitment\nReturns the kind of this opening\nReturns the merkle root of the commitments.\nReturns the merkle tree of the commitments.\nReturns the ranges of this commitment\nRecovers the expected commitment from this opening.\nThe upper bound of the commitment range\nThe upper bound of the transcript range\nA Blake3 commitment to the encodings of the substrings of …\nA substring opening using Blake3\nReturns the transcript data corresponding to this opening\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the hash of this commitment\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the transcript data corresponding to this opening\nCreates a new Blake3 commitment\nReturns the nonce of this commitment\nOpens this commitment\nRecovers the expected commitment from this opening.\nCertificate fixtures\nReturns a client random fixture.\nReturns an encoder fixture.\nReturns an encoder seed fixture.\nReturns an encoding provider fixture using the given …\nReturns a handshake commitment fixture.\nReturns a handshake data fixture.\nReturns a handshake summary fixture.\nReturns a notary signing key fixture.\nReturns a server certificate details fixture.\nReturns a server ephemeral key fixture.\nReturns a server key exchange details fixture.\nReturns a server random fixture.\nReturns a session header fixture using the given …\nCollects data needed for testing\nReturns test data for the appliedzkp.org website\nCA cert\nclient random\nDNS name of the website\nReturns the DigitallySignedStruct\nend-entity cert\nReturns the argument unchanged.\nintermediate cert\nCalls <code>U::from(self)</code>.\nReturns the ServerECDHParams in encoded form\nserver ephemeral P256 pubkey\nserver signature over the key exchange parameters\nalgorithm used to create the sig\nReturns the client random + server random + kx params in …\nserver random\nunix time when TLS handshake began\nReturns test data for the tlsnotary.org website\nErrors that can occur during operations with Merkle tree …\nA Merkle proof.\nA Merkle root.\nA Merkle tree.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a new Merkle tree from the given <code>leaves</code>\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates an inclusion proof for the given <code>indices</code>\nReturns the Merkle root for this MerkleTree\nReturns the inner byte array\nChecks if indices, hashes and leaves count are valid for …\nInformation about the values the prover wants to prove\nInformation about the values the prover wants to prove\nA session header.\nInformation about the TLS session\nA signed session header.\nA session header signed by a notary.\nTop-level enum for all messages\nA Merkle root for the tree of commitments to the …\nPurported cleartext values\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe session header\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe ids for the received transcript\nThe ids for the sent transcript\nThe notary’s signature\nAttempted to add a commitment with a duplicate id.\nThe proof contains duplicate transcript data.\nInvalid commitment id.\nInvalid commitment type.\nInvalid handshake\nThe proof contains an invalid inclusion proof.\nThe proof contains an invalid commitment opening.\nInvalid server certificate\nInvalid server name.\nInvalid signature\nThe proof contains more data than the maximum allowed.\nMissing commitment.\nSession proof is missing Notary signature\nRange of the opening is out of bounds.\nContains information about the session\nA session proof which is created from a …\nAn error that can occur while verifying a <code>SessionProof</code>.\nA substring proof using commitments\nA builder for <code>SubstringsProof</code>\nAn error for <code>SubstringsProofBuilder</code>\nAn error relating to <code>SubstringsProof</code>\nProof that a transcript of communications took place …\nBuilds the <code>SubstringsProof</code>\nReturns a reference to the commitments.\nCreate a new <code>WebPkiVerifier</code> with the default trust anchors …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nDecommitment to the TLS handshake and server identity.\nThe session header\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new builder.\nReveals data corresponding to the provided ranges and …\nReveals data corresponding to the provided commitment id\nReveals data corresponding to the provided transcript …\nReveals data corresponding to the provided ranges in the …\nThe server name.\nProof of the TLS handshake, server identity, and …\nInformation about the server\nSignature for the session header, if the notary signed it\nProof regarding the contents of the transcript.\nVerify the session proof.\nVerify the session info.\nVerifies this proof and, if successful, returns the …\nVerify the session proof using trust anchors from the …\nVerify the session info using trust anchors from the …\nThe handshake data does not match the commitment\nHandshake summary is part of the session header signed by …\nAn error that can occur while verifying a handshake summary\nThe session header is not consistent with the provided data\nThe key exchange parameters are invalid\nA validated notarized session stored by the Prover\nThe server ephemeral key does not match\nSession data used for notarization.\nAn authentic session header from the Notary\nAn error that can occur while verifying a session header\nReturns a substrings proof builder.\nReturns the transcript commitments.\nReturns the SessionData\nCreate a new ChaChaEncoder from encoder_seed\nReturns the seed used to generate plaintext encodings\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns commitment to the handshake data\nReturns the HandshakeSummary of the TLS session between …\nReturns the SessionHeader\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the merkle_root of the merkle tree of the prover’…\nCreates new session data.\nCreates a new HandshakeSummary\nCreate a new instance of SessionHeader\nCreate a new notarized session.\nReturns the number of bytes received by the server\nReturns the transcript for data received from the server\nReturns the number of bytes sent to the server\nReturns the transcript for data sent to the server\nReturns the server ephemeral public key\nReturns the session info\nReturns a proof of the TLS session\nReturns the signature for the session header, if the …\nTime of the TLS session, in seconds since the UNIX epoch.\nTime of the TLS session, in seconds since the UNIX epoch.\nVerifies that the provided handshake data matches this …\nVerify the data in the header is consistent with the Prover…\nThe direction of data communicated over a TLS connection.\nReceived by the prover from the TLS peer.\nA transcript which may have some data redacted.\nSent from the Prover to the TLS peer.\nA transcript contains a subset of bytes from a TLS session\nSlice of a transcript.\nReturns all the ranges of data which have been …\nReturns the actual traffic data of this transcript\nReturns a reference to the data.\nReturns the bytes of this slice\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the value ID for each byte in the provided range …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the bytes of this slice\nCreates a new transcript with the given ID and data\nCreates a new redacted transcript with the given length.\nCreates a new transcript slice.\nReturns the range of bytes this slice refers to in the …\nReturns all the ranges of data which have been redacted.\nSets all bytes in the transcript which were redacted.\nSets all bytes in the transcript which were redacted in …")